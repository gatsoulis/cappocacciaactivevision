/*
 * sendinput.cpp
 *
 *  Created on: Mar 2, 2011
 *      Author: gabriele
 */

#include "sendinput.h"

using namespace yarp::os;
using namespace yarp::sig;

SendInput::SendInput(std::string name) : Module(name) {

	std::cout << "\nConstructing " << getName() << "...";

	pointInLeft.setModule(this);
	pointInRight.setModule(this);
	reliabilityInLeft.setModule(this);
	reliabilityInRight.setModule(this);

	ciao = getName();
//	OutPortLeft.open("/left/out");
//	OutPortRight.open("/right/out");
	OutPortLeft.open(("/"+ciao+"/left/out").c_str());
	OutPortRight.open(("/"+ciao+"/right/out").c_str());

	debug = false;

	std::cout<<"\nfinished.";



}

SendInput::~SendInput() {

	std::cout<<"\nDestructing " << getName() << "...";

	OutPortLeft.close();
	OutPortRight.close();

	std::cout<<"\nfinished.";

}

void SendInput::connecting(){

	std::cout<<"\nConnecting " << getName() << "...";

//	Network::connect("/left/out","/motion/left/in");
//	Network::connect("/right/out","/motion/right/in");

	Network::connect(("/"+ciao+"/left/out").c_str(),"/motion/left/in");
	Network::connect(("/"+ciao+"/right/out").c_str(),"/motion/right/in");
	


	std::cout<<"\nfinished.";

}

void SendInput::disconnecting(){

	std::cout<<"\nDisconnecting " << getName() << "...";

	OutPortLeft.interrupt();
	OutPortRight.interrupt();


	std::cout<<"\nfinished.";

}

void SendInput::execute(){

	CvPoint* pointLeft = pointInLeft.getBuffer();
	CvPoint* pointRight = pointInRight.getBuffer();

	CvPoint* reliabilityLeft = reliabilityInLeft.getBuffer();
	CvPoint* reliabilityRight = reliabilityInRight.getBuffer();

	if(!pointLeft) 
		std::cout << "\n" << getName() << "ERROR::execute()::point left NULL";

	if(!pointRight) 
		std::cout << "\n" << getName() << "ERROR::execute()::point right NULL";

	if(!reliabilityLeft) 
		std::cout << "\n" << getName() << "ERROR::execute()::point left NULL";

	if(!reliabilityRight) 
		std::cout << "\n" << getName() << "ERROR::execute()::point right NULL";

	if(debug)
	{
		printf("\n POINT LEFT = [%d,%d]",pointLeft->x,pointLeft->y);
		printf("\n POINT RIGHT = [%d,%d]\n",pointRight->x,pointRight->y);
		printf("\n RELIABILITY LEFT = [%d,%d]",reliabilityLeft->x,reliabilityLeft->y);
		printf("\n RELIABILITY RIGHT = [%d,%d]\n",reliabilityRight->x,reliabilityRight->y);
	}

	Vector& targetL = OutPortLeft.prepare();
	targetL.resize(3);
	targetL[0] = pointLeft->x;
	targetL[1] = pointLeft->y;
	targetL[2] = reliabilityLeft->x;

	OutPortLeft.write();

	Vector& targetR = OutPortRight.prepare();
	targetR.resize(3);
	targetR[0] = pointRight->x;
	targetR[1] = pointRight->y;
	targetR[2] = reliabilityRight->x;

	OutPortRight.write();



}

